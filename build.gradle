
//================ SHARED CONF
allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'java'
  apply plugin: 'jacoco'

  repositories { mavenCentral() }

  group = "org.shl"
  version = "0.1.0"
}

//================ SUBPROJECT CONF
subprojects {

  dependencies {
    compile group: 'javax.validation', name: 'validation-api', version: '2.0.0.Final'

    testCompile group: 'org.testng', name: 'testng', version: '6.11'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testRuntime group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.0.2.Final'
    testRuntime group: 'org.apache.tomcat', name: 'tomcat-jasper-el', version: '9.0.1'
  }

  if( it.name.matches("validation\\.lambda\\..*")) {
    sourceSets {
      test {
        java { srcDir '../core/src/test/java' }
      }
    }
  }
  
  test {
    useTestNG()

    testLogging {
      exceptionFormat = 'full'
      events "failed"
    }

    ignoreFailures = true // failures in subprojects still allow full reports to be generated

    jacoco { append = false }
  }

  jacoco { toolVersion = "0.7.9" }

  jacocoTestReport {
    reports {
      xml.enabled false
      csv.enabled false
      html.enabled true
    }
  }

  tasks['check'].dependsOn jacocoTestReport
}

//================ REPORT AGGREGATORS

task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/tests")
  reportOn subprojects*.test
  shouldRunAfter subprojects*.check
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(files(subprojects.jacocoTestReport.executionData).collect{it}.findAll {it.canRead()})
    dependsOn subprojects.test.collect{it.path}
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
    shouldRunAfter subprojects*.check
    shouldRunAfter testReport
}

//================ ROOT PROJECT CONF
wrapper { gradleVersion = '4.3.1' }

assemble {
  mustRunAfter subprojects*.assemble
  doLast {
    mkdir libsDir
    subprojects*.tasks
        .flatten()
        .findAll { AbstractArchiveTask.isAssignableFrom(it.class) }
        .collect { it.archivePath }
        .each {
          def file = it
          copy {
            from file 
            into libsDir
          }
        }
  }
}

jar.onlyIf{false}

defaultTasks 'clean', 'build'

check.dependsOn testReport

